type OwnerChanged @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Activated @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Spawned @entity(immutable: true) {
  id: Bytes!
  prefix: BigInt! # uint32
  child: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EscapeRequested @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  sponsor: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EscapeCanceled @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  sponsor: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EscapeAccepted @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  sponsor: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LostSponsor @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  sponsor: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedKeys @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  encryptionKey: Bytes! # bytes32
  authenticationKey: Bytes! # bytes32
  cryptoSuiteVersion: BigInt! # uint32
  keyRevisionNumber: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BrokeContinuity @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  number: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedSpawnProxy @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  spawnProxy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedTransferProxy @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  transferProxy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedManagementProxy @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  managementProxy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedVotingProxy @entity(immutable: true) {
  id: Bytes!
  point: BigInt! # uint32
  votingProxy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedDns @entity(immutable: true) {
  id: Bytes!
  primary: String! # string
  secondary: String! # string
  tertiary: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipRenounced @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Transfer @entity(immutable: true) {
  id: Bytes!
  _from: Bytes! # address
  _to: Bytes! # address
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  _owner: Bytes! # address
  _approved: Bytes! # address
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  _owner: Bytes! # address
  _operator: Bytes! # address
  _approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EclipticOwnershipRenounced @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EclipticOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type UpgradePollStarted @entity(immutable: true) {
  id: Bytes!
  proposal: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DocumentPollStarted @entity(immutable: true) {
  id: Bytes!
  proposal: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpgradeMajority @entity(immutable: true) {
  id: Bytes!
  proposal: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DocumentMajority @entity(immutable: true) {
  id: Bytes!
  proposal: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PollsOwnershipRenounced @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PollsOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type LinearStarReleaseOwnershipRenounced @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LinearStarReleaseOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ConditionCompleted @entity(immutable: true) {
  id: Bytes!
  condition: Int! # uint8
  when: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Forfeit @entity(immutable: true) {
  id: Bytes!
  who: Bytes! # address
  batch: Int! # uint8
  stars: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConditionalStarReleaseOwnershipRenounced @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConditionalStarReleaseOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ClaimAdded @entity(immutable: true) {
  id: Bytes!
  by: BigInt! # uint32
  _protocol: String! # string
  _claim: String! # string
  _dossier: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimRemoved @entity(immutable: true) {
  id: Bytes!
  by: BigInt! # uint32
  _protocol: String! # string
  _claim: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Censured @entity(immutable: true) {
  id: Bytes!
  by: Int! # uint16
  who: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Forgiven @entity(immutable: true) {
  id: Bytes!
  by: Int! # uint16
  who: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Sent @entity(immutable: true) {
  id: Bytes!
  prefix: Int! # uint16
  fromPool: BigInt! # uint64
  by: BigInt! # uint32
  point: BigInt! # uint32
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
