// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ConditionCompleted extends ethereum.Event {
  get params(): ConditionCompleted__Params {
    return new ConditionCompleted__Params(this);
  }
}

export class ConditionCompleted__Params {
  _event: ConditionCompleted;

  constructor(event: ConditionCompleted) {
    this._event = event;
  }

  get condition(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get when(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Forfeit extends ethereum.Event {
  get params(): Forfeit__Params {
    return new Forfeit__Params(this);
  }
}

export class Forfeit__Params {
  _event: Forfeit;

  constructor(event: Forfeit) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batch(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get stars(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConditionalStarRelease__getConditionsStateResult {
  value0: Array<Bytes>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<Bytes>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }

  getConds(): Array<Bytes> {
    return this.value0;
  }

  getLives(): Array<BigInt> {
    return this.value1;
  }

  getDeads(): Array<BigInt> {
    return this.value2;
  }

  getTimes(): Array<BigInt> {
    return this.value3;
  }
}

export class ConditionalStarRelease__commitmentsResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: i32;

  constructor(value0: BigInt, value1: Address, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getRateUnit(): BigInt {
    return this.value0;
  }

  getApprovedTransferTo(): Address {
    return this.value1;
  }

  getTotal(): i32 {
    return this.value2;
  }

  getRate(): i32 {
    return this.value3;
  }
}

export class ConditionalStarRelease extends ethereum.SmartContract {
  static bind(address: Address): ConditionalStarRelease {
    return new ConditionalStarRelease("ConditionalStarRelease", address);
  }

  getWithdrawnFromBatch(_participant: Address, _batch: i32): i32 {
    let result = super.call(
      "getWithdrawnFromBatch",
      "getWithdrawnFromBatch(address,uint8):(uint16)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );

    return result[0].toI32();
  }

  try_getWithdrawnFromBatch(
    _participant: Address,
    _batch: i32
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getWithdrawnFromBatch",
      "getWithdrawnFromBatch(address,uint8):(uint16)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  conditions(param0: BigInt): Bytes {
    let result = super.call("conditions", "conditions(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_conditions(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("conditions", "conditions(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getForfeited(_participant: Address): Array<boolean> {
    let result = super.call("getForfeited", "getForfeited(address):(bool[])", [
      ethereum.Value.fromAddress(_participant)
    ]);

    return result[0].toBooleanArray();
  }

  try_getForfeited(_participant: Address): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getForfeited",
      "getForfeited(address):(bool[])",
      [ethereum.Value.fromAddress(_participant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  getBatch(_participant: Address, _batch: i32): i32 {
    let result = super.call("getBatch", "getBatch(address,uint8):(uint16)", [
      ethereum.Value.fromAddress(_participant),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
    ]);

    return result[0].toI32();
  }

  try_getBatch(_participant: Address, _batch: i32): ethereum.CallResult<i32> {
    let result = super.tryCall("getBatch", "getBatch(address,uint8):(uint16)", [
      ethereum.Value.fromAddress(_participant),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRemainingStars(_participant: Address): Array<i32> {
    let result = super.call(
      "getRemainingStars",
      "getRemainingStars(address):(uint16[])",
      [ethereum.Value.fromAddress(_participant)]
    );

    return result[0].toI32Array();
  }

  try_getRemainingStars(
    _participant: Address
  ): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getRemainingStars",
      "getRemainingStars(address):(uint16[])",
      [ethereum.Value.fromAddress(_participant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  escapeHatchDate(): BigInt {
    let result = super.call(
      "escapeHatchDate",
      "escapeHatchDate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_escapeHatchDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escapeHatchDate",
      "escapeHatchDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timestamps(param0: BigInt): BigInt {
    let result = super.call("timestamps", "timestamps(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timestamps(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timestamps", "timestamps(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  livelines(param0: BigInt): BigInt {
    let result = super.call("livelines", "livelines(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_livelines(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("livelines", "livelines(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyBalance(_participant: Address): boolean {
    let result = super.call("verifyBalance", "verifyBalance(address):(bool)", [
      ethereum.Value.fromAddress(_participant)
    ]);

    return result[0].toBoolean();
  }

  try_verifyBalance(_participant: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyBalance",
      "verifyBalance(address):(bool)",
      [ethereum.Value.fromAddress(_participant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasForfeitedBatch(_participant: Address, _batch: i32): boolean {
    let result = super.call(
      "hasForfeitedBatch",
      "hasForfeitedBatch(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );

    return result[0].toBoolean();
  }

  try_hasForfeitedBatch(
    _participant: Address,
    _batch: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasForfeitedBatch",
      "hasForfeitedBatch(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getWithdrawn(_participant: Address): Array<i32> {
    let result = super.call(
      "getWithdrawn",
      "getWithdrawn(address):(uint16[])",
      [ethereum.Value.fromAddress(_participant)]
    );

    return result[0].toI32Array();
  }

  try_getWithdrawn(_participant: Address): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getWithdrawn",
      "getWithdrawn(address):(uint16[])",
      [ethereum.Value.fromAddress(_participant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  deadlines(param0: BigInt): BigInt {
    let result = super.call("deadlines", "deadlines(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_deadlines(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deadlines", "deadlines(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConditionsState(): ConditionalStarRelease__getConditionsStateResult {
    let result = super.call(
      "getConditionsState",
      "getConditionsState():(bytes32[],uint256[],uint256[],uint256[])",
      []
    );

    return new ConditionalStarRelease__getConditionsStateResult(
      result[0].toBytesArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getConditionsState(): ethereum.CallResult<
    ConditionalStarRelease__getConditionsStateResult
  > {
    let result = super.tryCall(
      "getConditionsState",
      "getConditionsState():(bytes32[],uint256[],uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConditionalStarRelease__getConditionsStateResult(
        value[0].toBytesArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  azimuth(): Address {
    let result = super.call("azimuth", "azimuth():(address)", []);

    return result[0].toAddress();
  }

  try_azimuth(): ethereum.CallResult<Address> {
    let result = super.tryCall("azimuth", "azimuth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawLimit(_participant: Address, _batch: i32): i32 {
    let result = super.call(
      "withdrawLimit",
      "withdrawLimit(address,uint8):(uint16)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );

    return result[0].toI32();
  }

  try_withdrawLimit(
    _participant: Address,
    _batch: i32
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "withdrawLimit",
      "withdrawLimit(address,uint8):(uint16)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_batch))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  commitments(param0: Address): ConditionalStarRelease__commitmentsResult {
    let result = super.call(
      "commitments",
      "commitments(address):(uint256,address,uint16,uint16)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ConditionalStarRelease__commitmentsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toI32()
    );
  }

  try_commitments(
    param0: Address
  ): ethereum.CallResult<ConditionalStarRelease__commitmentsResult> {
    let result = super.tryCall(
      "commitments",
      "commitments(address):(uint256,address,uint16,uint16)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConditionalStarRelease__commitmentsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toI32()
      )
    );
  }

  getBatches(_participant: Address): Array<i32> {
    let result = super.call("getBatches", "getBatches(address):(uint16[])", [
      ethereum.Value.fromAddress(_participant)
    ]);

    return result[0].toI32Array();
  }

  try_getBatches(_participant: Address): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("getBatches", "getBatches(address):(uint16[])", [
      ethereum.Value.fromAddress(_participant)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }
}

export class WithdrawToSelfCall extends ethereum.Call {
  get inputs(): WithdrawToSelfCall__Inputs {
    return new WithdrawToSelfCall__Inputs(this);
  }

  get outputs(): WithdrawToSelfCall__Outputs {
    return new WithdrawToSelfCall__Outputs(this);
  }
}

export class WithdrawToSelfCall__Inputs {
  _call: WithdrawToSelfCall;

  constructor(call: WithdrawToSelfCall) {
    this._call = call;
  }

  get _batch(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class WithdrawToSelfCall__Outputs {
  _call: WithdrawToSelfCall;

  constructor(call: WithdrawToSelfCall) {
    this._call = call;
  }
}

export class TransferCommitmentCall extends ethereum.Call {
  get inputs(): TransferCommitmentCall__Inputs {
    return new TransferCommitmentCall__Inputs(this);
  }

  get outputs(): TransferCommitmentCall__Outputs {
    return new TransferCommitmentCall__Outputs(this);
  }
}

export class TransferCommitmentCall__Inputs {
  _call: TransferCommitmentCall;

  constructor(call: TransferCommitmentCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCommitmentCall__Outputs {
  _call: TransferCommitmentCall;

  constructor(call: TransferCommitmentCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawOverdueCall extends ethereum.Call {
  get inputs(): WithdrawOverdueCall__Inputs {
    return new WithdrawOverdueCall__Inputs(this);
  }

  get outputs(): WithdrawOverdueCall__Outputs {
    return new WithdrawOverdueCall__Outputs(this);
  }
}

export class WithdrawOverdueCall__Inputs {
  _call: WithdrawOverdueCall;

  constructor(call: WithdrawOverdueCall) {
    this._call = call;
  }

  get _participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawOverdueCall__Outputs {
  _call: WithdrawOverdueCall;

  constructor(call: WithdrawOverdueCall) {
    this._call = call;
  }
}

export class ForfeitCall extends ethereum.Call {
  get inputs(): ForfeitCall__Inputs {
    return new ForfeitCall__Inputs(this);
  }

  get outputs(): ForfeitCall__Outputs {
    return new ForfeitCall__Outputs(this);
  }
}

export class ForfeitCall__Inputs {
  _call: ForfeitCall;

  constructor(call: ForfeitCall) {
    this._call = call;
  }

  get _batch(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ForfeitCall__Outputs {
  _call: ForfeitCall;

  constructor(call: ForfeitCall) {
    this._call = call;
  }
}

export class WithdrawForfeitedCall extends ethereum.Call {
  get inputs(): WithdrawForfeitedCall__Inputs {
    return new WithdrawForfeitedCall__Inputs(this);
  }

  get outputs(): WithdrawForfeitedCall__Outputs {
    return new WithdrawForfeitedCall__Outputs(this);
  }
}

export class WithdrawForfeitedCall__Inputs {
  _call: WithdrawForfeitedCall;

  constructor(call: WithdrawForfeitedCall) {
    this._call = call;
  }

  get _participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batch(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawForfeitedCall__Outputs {
  _call: WithdrawForfeitedCall;

  constructor(call: WithdrawForfeitedCall) {
    this._call = call;
  }
}

export class ApproveCommitmentTransferCall extends ethereum.Call {
  get inputs(): ApproveCommitmentTransferCall__Inputs {
    return new ApproveCommitmentTransferCall__Inputs(this);
  }

  get outputs(): ApproveCommitmentTransferCall__Outputs {
    return new ApproveCommitmentTransferCall__Outputs(this);
  }
}

export class ApproveCommitmentTransferCall__Inputs {
  _call: ApproveCommitmentTransferCall;

  constructor(call: ApproveCommitmentTransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveCommitmentTransferCall__Outputs {
  _call: ApproveCommitmentTransferCall;

  constructor(call: ApproveCommitmentTransferCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _batch(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class AnalyzeConditionCall extends ethereum.Call {
  get inputs(): AnalyzeConditionCall__Inputs {
    return new AnalyzeConditionCall__Inputs(this);
  }

  get outputs(): AnalyzeConditionCall__Outputs {
    return new AnalyzeConditionCall__Outputs(this);
  }
}

export class AnalyzeConditionCall__Inputs {
  _call: AnalyzeConditionCall;

  constructor(call: AnalyzeConditionCall) {
    this._call = call;
  }

  get _condition(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class AnalyzeConditionCall__Outputs {
  _call: AnalyzeConditionCall;

  constructor(call: AnalyzeConditionCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batches(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _rate(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _rateUnit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _star(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _azimuth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _conditions(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _livelines(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _deadlines(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _escapeHatchDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
