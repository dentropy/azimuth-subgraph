// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Censured extends ethereum.Event {
  get params(): Censured__Params {
    return new Censured__Params(this);
  }
}

export class Censured__Params {
  _event: Censured;

  constructor(event: Censured) {
    this._event = event;
  }

  get by(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get who(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Forgiven extends ethereum.Event {
  get params(): Forgiven__Params {
    return new Forgiven__Params(this);
  }
}

export class Forgiven__Params {
  _event: Forgiven;

  constructor(event: Forgiven) {
    this._event = event;
  }

  get by(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get who(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Censures extends ethereum.SmartContract {
  static bind(address: Address): Censures {
    return new Censures("Censures", address);
  }

  getCensuredBy(_who: i32): Array<i32> {
    let result = super.call(
      "getCensuredBy",
      "getCensuredBy(uint16):(uint16[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_who))]
    );

    return result[0].toI32Array();
  }

  try_getCensuredBy(_who: i32): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getCensuredBy",
      "getCensuredBy(uint16):(uint16[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_who))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  censuring(param0: i32, param1: BigInt): BigInt {
    let result = super.call("censuring", "censuring(uint16,uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_censuring(param0: i32, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "censuring",
      "censuring(uint16,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCensuringCount(_whose: i32): BigInt {
    let result = super.call(
      "getCensuringCount",
      "getCensuringCount(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_whose))]
    );

    return result[0].toBigInt();
  }

  try_getCensuringCount(_whose: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCensuringCount",
      "getCensuringCount(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_whose))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  censuredByIndexes(param0: BigInt, param1: i32): BigInt {
    let result = super.call(
      "censuredByIndexes",
      "censuredByIndexes(uint32,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );

    return result[0].toBigInt();
  }

  try_censuredByIndexes(
    param0: BigInt,
    param1: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "censuredByIndexes",
      "censuredByIndexes(uint32,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCensuring(_whose: i32): Array<BigInt> {
    let result = super.call("getCensuring", "getCensuring(uint16):(uint32[])", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_whose))
    ]);

    return result[0].toBigIntArray();
  }

  try_getCensuring(_whose: i32): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getCensuring",
      "getCensuring(uint16):(uint32[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_whose))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  azimuth(): Address {
    let result = super.call("azimuth", "azimuth():(address)", []);

    return result[0].toAddress();
  }

  try_azimuth(): ethereum.CallResult<Address> {
    let result = super.tryCall("azimuth", "azimuth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  censuringIndexes(param0: i32, param1: BigInt): BigInt {
    let result = super.call(
      "censuringIndexes",
      "censuringIndexes(uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_censuringIndexes(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "censuringIndexes",
      "censuringIndexes(uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  censuredBy(param0: BigInt, param1: BigInt): i32 {
    let result = super.call(
      "censuredBy",
      "censuredBy(uint32,uint256):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toI32();
  }

  try_censuredBy(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "censuredBy",
      "censuredBy(uint32,uint256):(uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCensuredByCount(_who: i32): BigInt {
    let result = super.call(
      "getCensuredByCount",
      "getCensuredByCount(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_who))]
    );

    return result[0].toBigInt();
  }

  try_getCensuredByCount(_who: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCensuredByCount",
      "getCensuredByCount(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_who))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CensureCall extends ethereum.Call {
  get inputs(): CensureCall__Inputs {
    return new CensureCall__Inputs(this);
  }

  get outputs(): CensureCall__Outputs {
    return new CensureCall__Outputs(this);
  }
}

export class CensureCall__Inputs {
  _call: CensureCall;

  constructor(call: CensureCall) {
    this._call = call;
  }

  get _as(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _who(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CensureCall__Outputs {
  _call: CensureCall;

  constructor(call: CensureCall) {
    this._call = call;
  }
}

export class ForgiveCall extends ethereum.Call {
  get inputs(): ForgiveCall__Inputs {
    return new ForgiveCall__Inputs(this);
  }

  get outputs(): ForgiveCall__Outputs {
    return new ForgiveCall__Outputs(this);
  }
}

export class ForgiveCall__Inputs {
  _call: ForgiveCall;

  constructor(call: ForgiveCall) {
    this._call = call;
  }

  get _as(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _who(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ForgiveCall__Outputs {
  _call: ForgiveCall;

  constructor(call: ForgiveCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _azimuth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
