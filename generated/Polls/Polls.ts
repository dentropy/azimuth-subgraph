// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UpgradePollStarted extends ethereum.Event {
  get params(): UpgradePollStarted__Params {
    return new UpgradePollStarted__Params(this);
  }
}

export class UpgradePollStarted__Params {
  _event: UpgradePollStarted;

  constructor(event: UpgradePollStarted) {
    this._event = event;
  }

  get proposal(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DocumentPollStarted extends ethereum.Event {
  get params(): DocumentPollStarted__Params {
    return new DocumentPollStarted__Params(this);
  }
}

export class DocumentPollStarted__Params {
  _event: DocumentPollStarted;

  constructor(event: DocumentPollStarted) {
    this._event = event;
  }

  get proposal(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class UpgradeMajority extends ethereum.Event {
  get params(): UpgradeMajority__Params {
    return new UpgradeMajority__Params(this);
  }
}

export class UpgradeMajority__Params {
  _event: UpgradeMajority;

  constructor(event: UpgradeMajority) {
    this._event = event;
  }

  get proposal(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DocumentMajority extends ethereum.Event {
  get params(): DocumentMajority__Params {
    return new DocumentMajority__Params(this);
  }
}

export class DocumentMajority__Params {
  _event: DocumentMajority;

  constructor(event: DocumentMajority) {
    this._event = event;
  }

  get proposal(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Polls__documentPollsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getYesVotes(): i32 {
    return this.value1;
  }

  getNoVotes(): i32 {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getCooldown(): BigInt {
    return this.value4;
  }
}

export class Polls__upgradePollsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStart(): BigInt {
    return this.value0;
  }

  getYesVotes(): i32 {
    return this.value1;
  }

  getNoVotes(): i32 {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getCooldown(): BigInt {
    return this.value4;
  }
}

export class Polls extends ethereum.SmartContract {
  static bind(address: Address): Polls {
    return new Polls("Polls", address);
  }

  pollDuration(): BigInt {
    let result = super.call("pollDuration", "pollDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pollDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pollDuration", "pollDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateDocumentPoll(_proposal: Bytes): boolean {
    let result = super.call(
      "updateDocumentPoll",
      "updateDocumentPoll(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_proposal)]
    );

    return result[0].toBoolean();
  }

  try_updateDocumentPoll(_proposal: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateDocumentPoll",
      "updateDocumentPoll(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_proposal)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUpgradeProposals(): Array<Address> {
    let result = super.call(
      "getUpgradeProposals",
      "getUpgradeProposals():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getUpgradeProposals(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getUpgradeProposals",
      "getUpgradeProposals():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDocumentMajorities(): Array<Bytes> {
    let result = super.call(
      "getDocumentMajorities",
      "getDocumentMajorities():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getDocumentMajorities(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDocumentMajorities",
      "getDocumentMajorities():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  castUpgradeVote(_as: i32, _proposal: Address, _vote: boolean): boolean {
    let result = super.call(
      "castUpgradeVote",
      "castUpgradeVote(uint8,address,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_as)),
        ethereum.Value.fromAddress(_proposal),
        ethereum.Value.fromBoolean(_vote)
      ]
    );

    return result[0].toBoolean();
  }

  try_castUpgradeVote(
    _as: i32,
    _proposal: Address,
    _vote: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "castUpgradeVote",
      "castUpgradeVote(uint8,address,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_as)),
        ethereum.Value.fromAddress(_proposal),
        ethereum.Value.fromBoolean(_vote)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateUpgradePoll(_proposal: Address): boolean {
    let result = super.call(
      "updateUpgradePoll",
      "updateUpgradePoll(address):(bool)",
      [ethereum.Value.fromAddress(_proposal)]
    );

    return result[0].toBoolean();
  }

  try_updateUpgradePoll(_proposal: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateUpgradePoll",
      "updateUpgradePoll(address):(bool)",
      [ethereum.Value.fromAddress(_proposal)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalVoters(): i32 {
    let result = super.call("totalVoters", "totalVoters():(uint16)", []);

    return result[0].toI32();
  }

  try_totalVoters(): ethereum.CallResult<i32> {
    let result = super.tryCall("totalVoters", "totalVoters():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasVotedOnDocumentPoll(_galaxy: i32, _proposal: Bytes): boolean {
    let result = super.call(
      "hasVotedOnDocumentPoll",
      "hasVotedOnDocumentPoll(uint8,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_galaxy)),
        ethereum.Value.fromFixedBytes(_proposal)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasVotedOnDocumentPoll(
    _galaxy: i32,
    _proposal: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVotedOnDocumentPoll",
      "hasVotedOnDocumentPoll(uint8,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_galaxy)),
        ethereum.Value.fromFixedBytes(_proposal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  castDocumentVote(_as: i32, _proposal: Bytes, _vote: boolean): boolean {
    let result = super.call(
      "castDocumentVote",
      "castDocumentVote(uint8,bytes32,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_as)),
        ethereum.Value.fromFixedBytes(_proposal),
        ethereum.Value.fromBoolean(_vote)
      ]
    );

    return result[0].toBoolean();
  }

  try_castDocumentVote(
    _as: i32,
    _proposal: Bytes,
    _vote: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "castDocumentVote",
      "castDocumentVote(uint8,bytes32,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_as)),
        ethereum.Value.fromFixedBytes(_proposal),
        ethereum.Value.fromBoolean(_vote)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  documentHasAchievedMajority(param0: Bytes): boolean {
    let result = super.call(
      "documentHasAchievedMajority",
      "documentHasAchievedMajority(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_documentHasAchievedMajority(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "documentHasAchievedMajority",
      "documentHasAchievedMajority(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeProposals(param0: BigInt): Address {
    let result = super.call(
      "upgradeProposals",
      "upgradeProposals(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_upgradeProposals(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeProposals",
      "upgradeProposals(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  documentPolls(param0: Bytes): Polls__documentPollsResult {
    let result = super.call(
      "documentPolls",
      "documentPolls(bytes32):(uint256,uint16,uint16,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Polls__documentPollsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_documentPolls(
    param0: Bytes
  ): ethereum.CallResult<Polls__documentPollsResult> {
    let result = super.tryCall(
      "documentPolls",
      "documentPolls(bytes32):(uint256,uint16,uint16,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Polls__documentPollsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  documentProposals(param0: BigInt): Bytes {
    let result = super.call(
      "documentProposals",
      "documentProposals(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_documentProposals(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "documentProposals",
      "documentProposals(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUpgradeProposalCount(): BigInt {
    let result = super.call(
      "getUpgradeProposalCount",
      "getUpgradeProposalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUpgradeProposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUpgradeProposalCount",
      "getUpgradeProposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDocumentProposalCount(): BigInt {
    let result = super.call(
      "getDocumentProposalCount",
      "getDocumentProposalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDocumentProposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDocumentProposalCount",
      "getDocumentProposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDocumentProposals(): Array<Bytes> {
    let result = super.call(
      "getDocumentProposals",
      "getDocumentProposals():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getDocumentProposals(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDocumentProposals",
      "getDocumentProposals():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  pollCooldown(): BigInt {
    let result = super.call("pollCooldown", "pollCooldown():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pollCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pollCooldown", "pollCooldown():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradePolls(param0: Address): Polls__upgradePollsResult {
    let result = super.call(
      "upgradePolls",
      "upgradePolls(address):(uint256,uint16,uint16,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Polls__upgradePollsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_upgradePolls(
    param0: Address
  ): ethereum.CallResult<Polls__upgradePollsResult> {
    let result = super.tryCall(
      "upgradePolls",
      "upgradePolls(address):(uint256,uint16,uint16,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Polls__upgradePollsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  upgradeHasAchievedMajority(param0: Address): boolean {
    let result = super.call(
      "upgradeHasAchievedMajority",
      "upgradeHasAchievedMajority(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_upgradeHasAchievedMajority(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "upgradeHasAchievedMajority",
      "upgradeHasAchievedMajority(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  documentMajorities(param0: BigInt): Bytes {
    let result = super.call(
      "documentMajorities",
      "documentMajorities(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_documentMajorities(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "documentMajorities",
      "documentMajorities(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasVotedOnUpgradePoll(_galaxy: i32, _proposal: Address): boolean {
    let result = super.call(
      "hasVotedOnUpgradePoll",
      "hasVotedOnUpgradePoll(uint8,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_galaxy)),
        ethereum.Value.fromAddress(_proposal)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasVotedOnUpgradePoll(
    _galaxy: i32,
    _proposal: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVotedOnUpgradePoll",
      "hasVotedOnUpgradePoll(uint8,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_galaxy)),
        ethereum.Value.fromAddress(_proposal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class UpdateDocumentPollCall extends ethereum.Call {
  get inputs(): UpdateDocumentPollCall__Inputs {
    return new UpdateDocumentPollCall__Inputs(this);
  }

  get outputs(): UpdateDocumentPollCall__Outputs {
    return new UpdateDocumentPollCall__Outputs(this);
  }
}

export class UpdateDocumentPollCall__Inputs {
  _call: UpdateDocumentPollCall;

  constructor(call: UpdateDocumentPollCall) {
    this._call = call;
  }

  get _proposal(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateDocumentPollCall__Outputs {
  _call: UpdateDocumentPollCall;

  constructor(call: UpdateDocumentPollCall) {
    this._call = call;
  }

  get majority(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncrementTotalVotersCall extends ethereum.Call {
  get inputs(): IncrementTotalVotersCall__Inputs {
    return new IncrementTotalVotersCall__Inputs(this);
  }

  get outputs(): IncrementTotalVotersCall__Outputs {
    return new IncrementTotalVotersCall__Outputs(this);
  }
}

export class IncrementTotalVotersCall__Inputs {
  _call: IncrementTotalVotersCall;

  constructor(call: IncrementTotalVotersCall) {
    this._call = call;
  }
}

export class IncrementTotalVotersCall__Outputs {
  _call: IncrementTotalVotersCall;

  constructor(call: IncrementTotalVotersCall) {
    this._call = call;
  }
}

export class CastUpgradeVoteCall extends ethereum.Call {
  get inputs(): CastUpgradeVoteCall__Inputs {
    return new CastUpgradeVoteCall__Inputs(this);
  }

  get outputs(): CastUpgradeVoteCall__Outputs {
    return new CastUpgradeVoteCall__Outputs(this);
  }
}

export class CastUpgradeVoteCall__Inputs {
  _call: CastUpgradeVoteCall;

  constructor(call: CastUpgradeVoteCall) {
    this._call = call;
  }

  get _as(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _proposal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vote(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class CastUpgradeVoteCall__Outputs {
  _call: CastUpgradeVoteCall;

  constructor(call: CastUpgradeVoteCall) {
    this._call = call;
  }

  get majority(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateUpgradePollCall extends ethereum.Call {
  get inputs(): UpdateUpgradePollCall__Inputs {
    return new UpdateUpgradePollCall__Inputs(this);
  }

  get outputs(): UpdateUpgradePollCall__Outputs {
    return new UpdateUpgradePollCall__Outputs(this);
  }
}

export class UpdateUpgradePollCall__Inputs {
  _call: UpdateUpgradePollCall;

  constructor(call: UpdateUpgradePollCall) {
    this._call = call;
  }

  get _proposal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUpgradePollCall__Outputs {
  _call: UpdateUpgradePollCall;

  constructor(call: UpdateUpgradePollCall) {
    this._call = call;
  }

  get majority(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CastDocumentVoteCall extends ethereum.Call {
  get inputs(): CastDocumentVoteCall__Inputs {
    return new CastDocumentVoteCall__Inputs(this);
  }

  get outputs(): CastDocumentVoteCall__Outputs {
    return new CastDocumentVoteCall__Outputs(this);
  }
}

export class CastDocumentVoteCall__Inputs {
  _call: CastDocumentVoteCall;

  constructor(call: CastDocumentVoteCall) {
    this._call = call;
  }

  get _as(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _proposal(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _vote(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class CastDocumentVoteCall__Outputs {
  _call: CastDocumentVoteCall;

  constructor(call: CastDocumentVoteCall) {
    this._call = call;
  }

  get majority(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartDocumentPollCall extends ethereum.Call {
  get inputs(): StartDocumentPollCall__Inputs {
    return new StartDocumentPollCall__Inputs(this);
  }

  get outputs(): StartDocumentPollCall__Outputs {
    return new StartDocumentPollCall__Outputs(this);
  }
}

export class StartDocumentPollCall__Inputs {
  _call: StartDocumentPollCall;

  constructor(call: StartDocumentPollCall) {
    this._call = call;
  }

  get _proposal(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StartDocumentPollCall__Outputs {
  _call: StartDocumentPollCall;

  constructor(call: StartDocumentPollCall) {
    this._call = call;
  }
}

export class ReconfigureCall extends ethereum.Call {
  get inputs(): ReconfigureCall__Inputs {
    return new ReconfigureCall__Inputs(this);
  }

  get outputs(): ReconfigureCall__Outputs {
    return new ReconfigureCall__Outputs(this);
  }
}

export class ReconfigureCall__Inputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }

  get _pollDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pollCooldown(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReconfigureCall__Outputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }
}

export class StartUpgradePollCall extends ethereum.Call {
  get inputs(): StartUpgradePollCall__Inputs {
    return new StartUpgradePollCall__Inputs(this);
  }

  get outputs(): StartUpgradePollCall__Outputs {
    return new StartUpgradePollCall__Outputs(this);
  }
}

export class StartUpgradePollCall__Inputs {
  _call: StartUpgradePollCall;

  constructor(call: StartUpgradePollCall) {
    this._call = call;
  }

  get _proposal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StartUpgradePollCall__Outputs {
  _call: StartUpgradePollCall;

  constructor(call: StartUpgradePollCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _pollDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pollCooldown(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
