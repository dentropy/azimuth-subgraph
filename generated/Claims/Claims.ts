// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimAdded extends ethereum.Event {
  get params(): ClaimAdded__Params {
    return new ClaimAdded__Params(this);
  }
}

export class ClaimAdded__Params {
  _event: ClaimAdded;

  constructor(event: ClaimAdded) {
    this._event = event;
  }

  get by(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _protocol(): string {
    return this._event.parameters[1].value.toString();
  }

  get _claim(): string {
    return this._event.parameters[2].value.toString();
  }

  get _dossier(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ClaimRemoved extends ethereum.Event {
  get params(): ClaimRemoved__Params {
    return new ClaimRemoved__Params(this);
  }
}

export class ClaimRemoved__Params {
  _event: ClaimRemoved;

  constructor(event: ClaimRemoved) {
    this._event = event;
  }

  get by(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _protocol(): string {
    return this._event.parameters[1].value.toString();
  }

  get _claim(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Claims__claimsResult {
  value0: string;
  value1: string;
  value2: Bytes;

  constructor(value0: string, value1: string, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getProtocol(): string {
    return this.value0;
  }

  getClaim(): string {
    return this.value1;
  }

  getDossier(): Bytes {
    return this.value2;
  }
}

export class Claims extends ethereum.SmartContract {
  static bind(address: Address): Claims {
    return new Claims("Claims", address);
  }

  claims(param0: BigInt, param1: BigInt): Claims__claimsResult {
    let result = super.call(
      "claims",
      "claims(uint32,uint256):(string,string,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Claims__claimsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBytes()
    );
  }

  try_claims(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Claims__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(uint32,uint256):(string,string,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Claims__claimsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBytes()
      )
    );
  }

  findClaim(_whose: BigInt, _protocol: string, _claim: string): i32 {
    let result = super.call(
      "findClaim",
      "findClaim(uint32,string,string):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_whose),
        ethereum.Value.fromString(_protocol),
        ethereum.Value.fromString(_claim)
      ]
    );

    return result[0].toI32();
  }

  try_findClaim(
    _whose: BigInt,
    _protocol: string,
    _claim: string
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "findClaim",
      "findClaim(uint32,string,string):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_whose),
        ethereum.Value.fromString(_protocol),
        ethereum.Value.fromString(_claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  azimuth(): Address {
    let result = super.call("azimuth", "azimuth():(address)", []);

    return result[0].toAddress();
  }

  try_azimuth(): ethereum.CallResult<Address> {
    let result = super.tryCall("azimuth", "azimuth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RemoveClaimCall extends ethereum.Call {
  get inputs(): RemoveClaimCall__Inputs {
    return new RemoveClaimCall__Inputs(this);
  }

  get outputs(): RemoveClaimCall__Outputs {
    return new RemoveClaimCall__Outputs(this);
  }
}

export class RemoveClaimCall__Inputs {
  _call: RemoveClaimCall;

  constructor(call: RemoveClaimCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _protocol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _claim(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RemoveClaimCall__Outputs {
  _call: RemoveClaimCall;

  constructor(call: RemoveClaimCall) {
    this._call = call;
  }
}

export class ClearClaimsCall extends ethereum.Call {
  get inputs(): ClearClaimsCall__Inputs {
    return new ClearClaimsCall__Inputs(this);
  }

  get outputs(): ClearClaimsCall__Outputs {
    return new ClearClaimsCall__Outputs(this);
  }
}

export class ClearClaimsCall__Inputs {
  _call: ClearClaimsCall;

  constructor(call: ClearClaimsCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClearClaimsCall__Outputs {
  _call: ClearClaimsCall;

  constructor(call: ClearClaimsCall) {
    this._call = call;
  }
}

export class AddClaimCall extends ethereum.Call {
  get inputs(): AddClaimCall__Inputs {
    return new AddClaimCall__Inputs(this);
  }

  get outputs(): AddClaimCall__Outputs {
    return new AddClaimCall__Outputs(this);
  }
}

export class AddClaimCall__Inputs {
  _call: AddClaimCall;

  constructor(call: AddClaimCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _protocol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _claim(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _dossier(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddClaimCall__Outputs {
  _call: AddClaimCall;

  constructor(call: AddClaimCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _azimuth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
