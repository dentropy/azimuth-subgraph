// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Sent extends ethereum.Event {
  get params(): Sent__Params {
    return new Sent__Params(this);
  }
}

export class Sent__Params {
  _event: Sent;

  constructor(event: Sent) {
    this._event = event;
  }

  get prefix(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get fromPool(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get by(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get point(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class DelegatedSending extends ethereum.SmartContract {
  static bind(address: Address): DelegatedSending {
    return new DelegatedSending("DelegatedSending", address);
  }

  fromPool(param0: BigInt): BigInt {
    let result = super.call("fromPool", "fromPool(uint32):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_fromPool(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fromPool", "fromPool(uint32):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canSend(_as: BigInt, _point: BigInt): boolean {
    let result = super.call("canSend", "canSend(uint32,uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_as),
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_canSend(_as: BigInt, _point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canSend", "canSend(uint32,uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_as),
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pools(param0: BigInt): i32 {
    let result = super.call("pools", "pools(uint64):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_pools(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("pools", "pools(uint64):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  canReceive(_recipient: Address): boolean {
    let result = super.call("canReceive", "canReceive(address):(bool)", [
      ethereum.Value.fromAddress(_recipient)
    ]);

    return result[0].toBoolean();
  }

  try_canReceive(_recipient: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("canReceive", "canReceive(address):(bool)", [
      ethereum.Value.fromAddress(_recipient)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  limits(param0: i32): i32 {
    let result = super.call("limits", "limits(uint16):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toI32();
  }

  try_limits(param0: i32): ethereum.CallResult<i32> {
    let result = super.tryCall("limits", "limits(uint16):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  azimuth(): Address {
    let result = super.call("azimuth", "azimuth():(address)", []);

    return result[0].toAddress();
  }

  try_azimuth(): ethereum.CallResult<Address> {
    let result = super.tryCall("azimuth", "azimuth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ResetPoolCall extends ethereum.Call {
  get inputs(): ResetPoolCall__Inputs {
    return new ResetPoolCall__Inputs(this);
  }

  get outputs(): ResetPoolCall__Outputs {
    return new ResetPoolCall__Outputs(this);
  }
}

export class ResetPoolCall__Inputs {
  _call: ResetPoolCall;

  constructor(call: ResetPoolCall) {
    this._call = call;
  }

  get _for(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetPoolCall__Outputs {
  _call: ResetPoolCall;

  constructor(call: ResetPoolCall) {
    this._call = call;
  }
}

export class SendPointCall extends ethereum.Call {
  get inputs(): SendPointCall__Inputs {
    return new SendPointCall__Inputs(this);
  }

  get outputs(): SendPointCall__Outputs {
    return new SendPointCall__Outputs(this);
  }
}

export class SendPointCall__Inputs {
  _call: SendPointCall;

  constructor(call: SendPointCall) {
    this._call = call;
  }

  get _as(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _point(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SendPointCall__Outputs {
  _call: SendPointCall;

  constructor(call: SendPointCall) {
    this._call = call;
  }
}

export class ConfigureLimitCall extends ethereum.Call {
  get inputs(): ConfigureLimitCall__Inputs {
    return new ConfigureLimitCall__Inputs(this);
  }

  get outputs(): ConfigureLimitCall__Outputs {
    return new ConfigureLimitCall__Outputs(this);
  }
}

export class ConfigureLimitCall__Inputs {
  _call: ConfigureLimitCall;

  constructor(call: ConfigureLimitCall) {
    this._call = call;
  }

  get _prefix(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _limit(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ConfigureLimitCall__Outputs {
  _call: ConfigureLimitCall;

  constructor(call: ConfigureLimitCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _azimuth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
