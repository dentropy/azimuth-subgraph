// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Activated extends ethereum.Event {
  get params(): Activated__Params {
    return new Activated__Params(this);
  }
}

export class Activated__Params {
  _event: Activated;

  constructor(event: Activated) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Spawned extends ethereum.Event {
  get params(): Spawned__Params {
    return new Spawned__Params(this);
  }
}

export class Spawned__Params {
  _event: Spawned;

  constructor(event: Spawned) {
    this._event = event;
  }

  get prefix(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get child(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EscapeRequested extends ethereum.Event {
  get params(): EscapeRequested__Params {
    return new EscapeRequested__Params(this);
  }
}

export class EscapeRequested__Params {
  _event: EscapeRequested;

  constructor(event: EscapeRequested) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sponsor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EscapeCanceled extends ethereum.Event {
  get params(): EscapeCanceled__Params {
    return new EscapeCanceled__Params(this);
  }
}

export class EscapeCanceled__Params {
  _event: EscapeCanceled;

  constructor(event: EscapeCanceled) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sponsor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EscapeAccepted extends ethereum.Event {
  get params(): EscapeAccepted__Params {
    return new EscapeAccepted__Params(this);
  }
}

export class EscapeAccepted__Params {
  _event: EscapeAccepted;

  constructor(event: EscapeAccepted) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sponsor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LostSponsor extends ethereum.Event {
  get params(): LostSponsor__Params {
    return new LostSponsor__Params(this);
  }
}

export class LostSponsor__Params {
  _event: LostSponsor;

  constructor(event: LostSponsor) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sponsor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChangedKeys extends ethereum.Event {
  get params(): ChangedKeys__Params {
    return new ChangedKeys__Params(this);
  }
}

export class ChangedKeys__Params {
  _event: ChangedKeys;

  constructor(event: ChangedKeys) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get encryptionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get authenticationKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get cryptoSuiteVersion(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get keyRevisionNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BrokeContinuity extends ethereum.Event {
  get params(): BrokeContinuity__Params {
    return new BrokeContinuity__Params(this);
  }
}

export class BrokeContinuity__Params {
  _event: BrokeContinuity;

  constructor(event: BrokeContinuity) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get number(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChangedSpawnProxy extends ethereum.Event {
  get params(): ChangedSpawnProxy__Params {
    return new ChangedSpawnProxy__Params(this);
  }
}

export class ChangedSpawnProxy__Params {
  _event: ChangedSpawnProxy;

  constructor(event: ChangedSpawnProxy) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get spawnProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangedTransferProxy extends ethereum.Event {
  get params(): ChangedTransferProxy__Params {
    return new ChangedTransferProxy__Params(this);
  }
}

export class ChangedTransferProxy__Params {
  _event: ChangedTransferProxy;

  constructor(event: ChangedTransferProxy) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get transferProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangedManagementProxy extends ethereum.Event {
  get params(): ChangedManagementProxy__Params {
    return new ChangedManagementProxy__Params(this);
  }
}

export class ChangedManagementProxy__Params {
  _event: ChangedManagementProxy;

  constructor(event: ChangedManagementProxy) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get managementProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangedVotingProxy extends ethereum.Event {
  get params(): ChangedVotingProxy__Params {
    return new ChangedVotingProxy__Params(this);
  }
}

export class ChangedVotingProxy__Params {
  _event: ChangedVotingProxy;

  constructor(event: ChangedVotingProxy) {
    this._event = event;
  }

  get point(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get votingProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangedDns extends ethereum.Event {
  get params(): ChangedDns__Params {
    return new ChangedDns__Params(this);
  }
}

export class ChangedDns__Params {
  _event: ChangedDns;

  constructor(event: ChangedDns) {
    this._event = event;
  }

  get primary(): string {
    return this._event.parameters[0].value.toString();
  }

  get secondary(): string {
    return this._event.parameters[1].value.toString();
  }

  get tertiary(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Azimuth__rightsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getManagementProxy(): Address {
    return this.value1;
  }

  getSpawnProxy(): Address {
    return this.value2;
  }

  getVotingProxy(): Address {
    return this.value3;
  }

  getTransferProxy(): Address {
    return this.value4;
  }
}

export class Azimuth__pointsResult {
  value0: Bytes;
  value1: Bytes;
  value2: boolean;
  value3: boolean;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: boolean,
    value3: boolean,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getEncryptionKey(): Bytes {
    return this.value0;
  }

  getAuthenticationKey(): Bytes {
    return this.value1;
  }

  getHasSponsor(): boolean {
    return this.value2;
  }

  getActive(): boolean {
    return this.value3;
  }

  getEscapeRequested(): boolean {
    return this.value4;
  }

  getSponsor(): BigInt {
    return this.value5;
  }

  getEscapeRequestedTo(): BigInt {
    return this.value6;
  }

  getCryptoSuiteVersion(): BigInt {
    return this.value7;
  }

  getKeyRevisionNumber(): BigInt {
    return this.value8;
  }

  getContinuityNumber(): BigInt {
    return this.value9;
  }
}

export class Azimuth__getKeysResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Bytes, value1: Bytes, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getCrypt(): Bytes {
    return this.value0;
  }

  getAuth(): Bytes {
    return this.value1;
  }

  getSuite(): BigInt {
    return this.value2;
  }

  getRevision(): BigInt {
    return this.value3;
  }
}

export class Azimuth extends ethereum.SmartContract {
  static bind(address: Address): Azimuth {
    return new Azimuth("Azimuth", address);
  }

  escapeRequestsIndexes(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "escapeRequestsIndexes",
      "escapeRequestsIndexes(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_escapeRequestsIndexes(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escapeRequestsIndexes",
      "escapeRequestsIndexes(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnedPoints(_whose: Address): Array<BigInt> {
    let result = super.call(
      "getOwnedPoints",
      "getOwnedPoints(address):(uint32[])",
      [ethereum.Value.fromAddress(_whose)]
    );

    return result[0].toBigIntArray();
  }

  try_getOwnedPoints(_whose: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOwnedPoints",
      "getOwnedPoints(address):(uint32[])",
      [ethereum.Value.fromAddress(_whose)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  votingFor(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "votingFor",
      "votingFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingFor(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingFor",
      "votingFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rights(param0: BigInt): Azimuth__rightsResult {
    let result = super.call(
      "rights",
      "rights(uint32):(address,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Azimuth__rightsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress()
    );
  }

  try_rights(param0: BigInt): ethereum.CallResult<Azimuth__rightsResult> {
    let result = super.tryCall(
      "rights",
      "rights(uint32):(address,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Azimuth__rightsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress()
      )
    );
  }

  transferringFor(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "transferringFor",
      "transferringFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferringFor(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferringFor",
      "transferringFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSponsor(_point: BigInt, _sponsor: BigInt): boolean {
    let result = super.call("isSponsor", "isSponsor(uint32,uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromUnsignedBigInt(_sponsor)
    ]);

    return result[0].toBoolean();
  }

  try_isSponsor(
    _point: BigInt,
    _sponsor: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSponsor", "isSponsor(uint32,uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromUnsignedBigInt(_sponsor)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getManagementProxy(_point: BigInt): Address {
    let result = super.call(
      "getManagementProxy",
      "getManagementProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toAddress();
  }

  try_getManagementProxy(_point: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getManagementProxy",
      "getManagementProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContinuityNumber(_point: BigInt): BigInt {
    let result = super.call(
      "getContinuityNumber",
      "getContinuityNumber(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toBigInt();
  }

  try_getContinuityNumber(_point: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContinuityNumber",
      "getContinuityNumber(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsoring(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "sponsoring",
      "sponsoring(uint32,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_sponsoring(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsoring",
      "sponsoring(uint32,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnedPointCount(_whose: Address): BigInt {
    let result = super.call(
      "getOwnedPointCount",
      "getOwnedPointCount(address):(uint256)",
      [ethereum.Value.fromAddress(_whose)]
    );

    return result[0].toBigInt();
  }

  try_getOwnedPointCount(_whose: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnedPointCount",
      "getOwnedPointCount(address):(uint256)",
      [ethereum.Value.fromAddress(_whose)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnedPointAtIndex(_whose: Address, _index: BigInt): BigInt {
    let result = super.call(
      "getOwnedPointAtIndex",
      "getOwnedPointAtIndex(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(_whose),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOwnedPointAtIndex(
    _whose: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnedPointAtIndex",
      "getOwnedPointAtIndex(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(_whose),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransferProxy(_point: BigInt): Address {
    let result = super.call(
      "getTransferProxy",
      "getTransferProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toAddress();
  }

  try_getTransferProxy(_point: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTransferProxy",
      "getTransferProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSpawnProxy(_point: BigInt, _proxy: Address): boolean {
    let result = super.call(
      "isSpawnProxy",
      "isSpawnProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );

    return result[0].toBoolean();
  }

  try_isSpawnProxy(
    _point: BigInt,
    _proxy: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSpawnProxy",
      "isSpawnProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pointsOwnedBy(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "pointsOwnedBy",
      "pointsOwnedBy(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_pointsOwnedBy(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pointsOwnedBy",
      "pointsOwnedBy(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operators(param0: Address, param1: Address): boolean {
    let result = super.call("operators", "operators(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_operators(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "operators",
      "operators(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSpawnCount(_point: BigInt): BigInt {
    let result = super.call("getSpawnCount", "getSpawnCount(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBigInt();
  }

  try_getSpawnCount(_point: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpawnCount",
      "getSpawnCount(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsoringIndexes(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "sponsoringIndexes",
      "sponsoringIndexes(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_sponsoringIndexes(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsoringIndexes",
      "sponsoringIndexes(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTransferProxy(_point: BigInt, _proxy: Address): boolean {
    let result = super.call(
      "isTransferProxy",
      "isTransferProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTransferProxy(
    _point: BigInt,
    _proxy: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransferProxy",
      "isTransferProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVotingProxy(_point: BigInt): Address {
    let result = super.call(
      "getVotingProxy",
      "getVotingProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toAddress();
  }

  try_getVotingProxy(_point: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVotingProxy",
      "getVotingProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isManagementProxy(_point: BigInt, _proxy: Address): boolean {
    let result = super.call(
      "isManagementProxy",
      "isManagementProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );

    return result[0].toBoolean();
  }

  try_isManagementProxy(
    _point: BigInt,
    _proxy: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isManagementProxy",
      "isManagementProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votingForIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "votingForIndexes",
      "votingForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingForIndexes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingForIndexes",
      "votingForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isLive(_point: BigInt): boolean {
    let result = super.call("isLive", "isLive(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_isLive(_point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEscapeRequests(_sponsor: BigInt): Array<BigInt> {
    let result = super.call(
      "getEscapeRequests",
      "getEscapeRequests(uint32):(uint32[])",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );

    return result[0].toBigIntArray();
  }

  try_getEscapeRequests(_sponsor: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getEscapeRequests",
      "getEscapeRequests(uint32):(uint32[])",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getSponsor(_point: BigInt): BigInt {
    let result = super.call("getSponsor", "getSponsor(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBigInt();
  }

  try_getSponsor(_point: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSponsor", "getSponsor(uint32):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEscapeRequestsCount(_sponsor: BigInt): BigInt {
    let result = super.call(
      "getEscapeRequestsCount",
      "getEscapeRequestsCount(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );

    return result[0].toBigInt();
  }

  try_getEscapeRequestsCount(_sponsor: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEscapeRequestsCount",
      "getEscapeRequestsCount(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pointOwnerIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "pointOwnerIndexes",
      "pointOwnerIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_pointOwnerIndexes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pointOwnerIndexes",
      "pointOwnerIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagerFor(_proxy: Address): Array<BigInt> {
    let result = super.call(
      "getManagerFor",
      "getManagerFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigIntArray();
  }

  try_getManagerFor(_proxy: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getManagerFor",
      "getManagerFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  managerForIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "managerForIndexes",
      "managerForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_managerForIndexes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerForIndexes",
      "managerForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerFor(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "managerFor",
      "managerFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_managerFor(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerFor",
      "managerFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(_point: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(_point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOwner(_point: BigInt): Address {
    let result = super.call("getOwner", "getOwner(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toAddress();
  }

  try_getOwner(_point: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  points(param0: BigInt): Azimuth__pointsResult {
    let result = super.call(
      "points",
      "points(uint32):(bytes32,bytes32,bool,bool,bool,uint32,uint32,uint32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Azimuth__pointsResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_points(param0: BigInt): ethereum.CallResult<Azimuth__pointsResult> {
    let result = super.tryCall(
      "points",
      "points(uint32):(bytes32,bytes32,bool,bool,bool,uint32,uint32,uint32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Azimuth__pointsResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  getSpawningForCount(_proxy: Address): BigInt {
    let result = super.call(
      "getSpawningForCount",
      "getSpawningForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigInt();
  }

  try_getSpawningForCount(_proxy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpawningForCount",
      "getSpawningForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasBeenLinked(_point: BigInt): boolean {
    let result = super.call("hasBeenLinked", "hasBeenLinked(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_hasBeenLinked(_point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBeenLinked",
      "hasBeenLinked(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canTransfer(_point: BigInt, _who: Address): boolean {
    let result = super.call(
      "canTransfer",
      "canTransfer(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_who)
      ]
    );

    return result[0].toBoolean();
  }

  try_canTransfer(_point: BigInt, _who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canTransfer",
      "canTransfer(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  spawningForIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "spawningForIndexes",
      "spawningForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_spawningForIndexes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "spawningForIndexes",
      "spawningForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasSponsor(_point: BigInt): boolean {
    let result = super.call("hasSponsor", "hasSponsor(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_hasSponsor(_point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasSponsor", "hasSponsor(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSpawned(_point: BigInt): Array<BigInt> {
    let result = super.call("getSpawned", "getSpawned(uint32):(uint32[])", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBigIntArray();
  }

  try_getSpawned(_point: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getSpawned", "getSpawned(uint32):(uint32[])", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  canSpawnAs(_point: BigInt, _who: Address): boolean {
    let result = super.call("canSpawnAs", "canSpawnAs(uint32,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBoolean();
  }

  try_canSpawnAs(_point: BigInt, _who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canSpawnAs",
      "canSpawnAs(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getKeyRevisionNumber(_point: BigInt): BigInt {
    let result = super.call(
      "getKeyRevisionNumber",
      "getKeyRevisionNumber(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toBigInt();
  }

  try_getKeyRevisionNumber(_point: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getKeyRevisionNumber",
      "getKeyRevisionNumber(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canManage(_point: BigInt, _who: Address): boolean {
    let result = super.call("canManage", "canManage(uint32,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBoolean();
  }

  try_canManage(_point: BigInt, _who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canManage",
      "canManage(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTransferringFor(_proxy: Address): Array<BigInt> {
    let result = super.call(
      "getTransferringFor",
      "getTransferringFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigIntArray();
  }

  try_getTransferringFor(_proxy: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTransferringFor",
      "getTransferringFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPointSize(_point: BigInt): i32 {
    let result = super.call("getPointSize", "getPointSize(uint32):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toI32();
  }

  try_getPointSize(_point: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getPointSize", "getPointSize(uint32):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getSponsoringCount(_sponsor: BigInt): BigInt {
    let result = super.call(
      "getSponsoringCount",
      "getSponsoringCount(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );

    return result[0].toBigInt();
  }

  try_getSponsoringCount(_sponsor: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSponsoringCount",
      "getSponsoringCount(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpawningFor(_proxy: Address): Array<BigInt> {
    let result = super.call(
      "getSpawningFor",
      "getSpawningFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigIntArray();
  }

  try_getSpawningFor(_proxy: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSpawningFor",
      "getSpawningFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isEscaping(_point: BigInt): boolean {
    let result = super.call("isEscaping", "isEscaping(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toBoolean();
  }

  try_isEscaping(_point: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEscaping", "isEscaping(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  escapeRequests(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "escapeRequests",
      "escapeRequests(uint32,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_escapeRequests(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escapeRequests",
      "escapeRequests(uint32,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSponsoring(_sponsor: BigInt): Array<BigInt> {
    let result = super.call(
      "getSponsoring",
      "getSponsoring(uint32):(uint32[])",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );

    return result[0].toBigIntArray();
  }

  try_getSponsoring(_sponsor: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSponsoring",
      "getSponsoring(uint32):(uint32[])",
      [ethereum.Value.fromUnsignedBigInt(_sponsor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isOperator(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperator(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canVoteAs(_point: BigInt, _who: Address): boolean {
    let result = super.call("canVoteAs", "canVoteAs(uint32,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBoolean();
  }

  try_canVoteAs(_point: BigInt, _who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canVoteAs",
      "canVoteAs(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_who)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getKeys(_point: BigInt): Azimuth__getKeysResult {
    let result = super.call(
      "getKeys",
      "getKeys(uint32):(bytes32,bytes32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return new Azimuth__getKeysResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getKeys(_point: BigInt): ethereum.CallResult<Azimuth__getKeysResult> {
    let result = super.tryCall(
      "getKeys",
      "getKeys(uint32):(bytes32,bytes32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Azimuth__getKeysResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  isOwner(_point: BigInt, _address: Address): boolean {
    let result = super.call("isOwner", "isOwner(uint32,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(_point: BigInt, _address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(uint32,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_point),
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getManagerForCount(_proxy: Address): BigInt {
    let result = super.call(
      "getManagerForCount",
      "getManagerForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigInt();
  }

  try_getManagerForCount(_proxy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManagerForCount",
      "getManagerForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferringForIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "transferringForIndexes",
      "transferringForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferringForIndexes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferringForIndexes",
      "transferringForIndexes(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingFor(_proxy: Address): Array<BigInt> {
    let result = super.call(
      "getVotingFor",
      "getVotingFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigIntArray();
  }

  try_getVotingFor(_proxy: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVotingFor",
      "getVotingFor(address):(uint32[])",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  spawningFor(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "spawningFor",
      "spawningFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_spawningFor(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "spawningFor",
      "spawningFor(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransferringForCount(_proxy: Address): BigInt {
    let result = super.call(
      "getTransferringForCount",
      "getTransferringForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigInt();
  }

  try_getTransferringForCount(_proxy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTransferringForCount",
      "getTransferringForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isVotingProxy(_point: BigInt, _proxy: Address): boolean {
    let result = super.call(
      "isVotingProxy",
      "isVotingProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );

    return result[0].toBoolean();
  }

  try_isVotingProxy(
    _point: BigInt,
    _proxy: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVotingProxy",
      "isVotingProxy(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromAddress(_proxy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPrefix(_point: BigInt): i32 {
    let result = super.call("getPrefix", "getPrefix(uint32):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);

    return result[0].toI32();
  }

  try_getPrefix(_point: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getPrefix", "getPrefix(uint32):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(_point)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dnsDomains(param0: BigInt): string {
    let result = super.call("dnsDomains", "dnsDomains(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_dnsDomains(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("dnsDomains", "dnsDomains(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSpawnProxy(_point: BigInt): Address {
    let result = super.call(
      "getSpawnProxy",
      "getSpawnProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toAddress();
  }

  try_getSpawnProxy(_point: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSpawnProxy",
      "getSpawnProxy(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEscapeRequest(_point: BigInt): BigInt {
    let result = super.call(
      "getEscapeRequest",
      "getEscapeRequest(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );

    return result[0].toBigInt();
  }

  try_getEscapeRequest(_point: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEscapeRequest",
      "getEscapeRequest(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_point)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingForCount(_proxy: Address): BigInt {
    let result = super.call(
      "getVotingForCount",
      "getVotingForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );

    return result[0].toBigInt();
  }

  try_getVotingForCount(_proxy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingForCount",
      "getVotingForCount(address):(uint256)",
      [ethereum.Value.fromAddress(_proxy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isRequestingEscapeTo(_point: BigInt, _sponsor: BigInt): boolean {
    let result = super.call(
      "isRequestingEscapeTo",
      "isRequestingEscapeTo(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromUnsignedBigInt(_sponsor)
      ]
    );

    return result[0].toBoolean();
  }

  try_isRequestingEscapeTo(
    _point: BigInt,
    _sponsor: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRequestingEscapeTo",
      "isRequestingEscapeTo(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_point),
        ethereum.Value.fromUnsignedBigInt(_sponsor)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DoEscapeCall extends ethereum.Call {
  get inputs(): DoEscapeCall__Inputs {
    return new DoEscapeCall__Inputs(this);
  }

  get outputs(): DoEscapeCall__Outputs {
    return new DoEscapeCall__Outputs(this);
  }
}

export class DoEscapeCall__Inputs {
  _call: DoEscapeCall;

  constructor(call: DoEscapeCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DoEscapeCall__Outputs {
  _call: DoEscapeCall;

  constructor(call: DoEscapeCall) {
    this._call = call;
  }
}

export class SetSpawnProxyCall extends ethereum.Call {
  get inputs(): SetSpawnProxyCall__Inputs {
    return new SetSpawnProxyCall__Inputs(this);
  }

  get outputs(): SetSpawnProxyCall__Outputs {
    return new SetSpawnProxyCall__Outputs(this);
  }
}

export class SetSpawnProxyCall__Inputs {
  _call: SetSpawnProxyCall;

  constructor(call: SetSpawnProxyCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetSpawnProxyCall__Outputs {
  _call: SetSpawnProxyCall;

  constructor(call: SetSpawnProxyCall) {
    this._call = call;
  }
}

export class SetTransferProxyCall extends ethereum.Call {
  get inputs(): SetTransferProxyCall__Inputs {
    return new SetTransferProxyCall__Inputs(this);
  }

  get outputs(): SetTransferProxyCall__Outputs {
    return new SetTransferProxyCall__Outputs(this);
  }
}

export class SetTransferProxyCall__Inputs {
  _call: SetTransferProxyCall;

  constructor(call: SetTransferProxyCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTransferProxyCall__Outputs {
  _call: SetTransferProxyCall;

  constructor(call: SetTransferProxyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ActivatePointCall extends ethereum.Call {
  get inputs(): ActivatePointCall__Inputs {
    return new ActivatePointCall__Inputs(this);
  }

  get outputs(): ActivatePointCall__Outputs {
    return new ActivatePointCall__Outputs(this);
  }
}

export class ActivatePointCall__Inputs {
  _call: ActivatePointCall;

  constructor(call: ActivatePointCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActivatePointCall__Outputs {
  _call: ActivatePointCall;

  constructor(call: ActivatePointCall) {
    this._call = call;
  }
}

export class SetManagementProxyCall extends ethereum.Call {
  get inputs(): SetManagementProxyCall__Inputs {
    return new SetManagementProxyCall__Inputs(this);
  }

  get outputs(): SetManagementProxyCall__Outputs {
    return new SetManagementProxyCall__Outputs(this);
  }
}

export class SetManagementProxyCall__Inputs {
  _call: SetManagementProxyCall;

  constructor(call: SetManagementProxyCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagementProxyCall__Outputs {
  _call: SetManagementProxyCall;

  constructor(call: SetManagementProxyCall) {
    this._call = call;
  }
}

export class SetVotingProxyCall extends ethereum.Call {
  get inputs(): SetVotingProxyCall__Inputs {
    return new SetVotingProxyCall__Inputs(this);
  }

  get outputs(): SetVotingProxyCall__Outputs {
    return new SetVotingProxyCall__Outputs(this);
  }
}

export class SetVotingProxyCall__Inputs {
  _call: SetVotingProxyCall;

  constructor(call: SetVotingProxyCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetVotingProxyCall__Outputs {
  _call: SetVotingProxyCall;

  constructor(call: SetVotingProxyCall) {
    this._call = call;
  }
}

export class SetEscapeRequestCall extends ethereum.Call {
  get inputs(): SetEscapeRequestCall__Inputs {
    return new SetEscapeRequestCall__Inputs(this);
  }

  get outputs(): SetEscapeRequestCall__Outputs {
    return new SetEscapeRequestCall__Outputs(this);
  }
}

export class SetEscapeRequestCall__Inputs {
  _call: SetEscapeRequestCall;

  constructor(call: SetEscapeRequestCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sponsor(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEscapeRequestCall__Outputs {
  _call: SetEscapeRequestCall;

  constructor(call: SetEscapeRequestCall) {
    this._call = call;
  }
}

export class SetDnsDomainsCall extends ethereum.Call {
  get inputs(): SetDnsDomainsCall__Inputs {
    return new SetDnsDomainsCall__Inputs(this);
  }

  get outputs(): SetDnsDomainsCall__Outputs {
    return new SetDnsDomainsCall__Outputs(this);
  }
}

export class SetDnsDomainsCall__Inputs {
  _call: SetDnsDomainsCall;

  constructor(call: SetDnsDomainsCall) {
    this._call = call;
  }

  get _primary(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _secondary(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tertiary(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetDnsDomainsCall__Outputs {
  _call: SetDnsDomainsCall;

  constructor(call: SetDnsDomainsCall) {
    this._call = call;
  }
}

export class LoseSponsorCall extends ethereum.Call {
  get inputs(): LoseSponsorCall__Inputs {
    return new LoseSponsorCall__Inputs(this);
  }

  get outputs(): LoseSponsorCall__Outputs {
    return new LoseSponsorCall__Outputs(this);
  }
}

export class LoseSponsorCall__Inputs {
  _call: LoseSponsorCall;

  constructor(call: LoseSponsorCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LoseSponsorCall__Outputs {
  _call: LoseSponsorCall;

  constructor(call: LoseSponsorCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class RegisterSpawnedCall extends ethereum.Call {
  get inputs(): RegisterSpawnedCall__Inputs {
    return new RegisterSpawnedCall__Inputs(this);
  }

  get outputs(): RegisterSpawnedCall__Outputs {
    return new RegisterSpawnedCall__Outputs(this);
  }
}

export class RegisterSpawnedCall__Inputs {
  _call: RegisterSpawnedCall;

  constructor(call: RegisterSpawnedCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RegisterSpawnedCall__Outputs {
  _call: RegisterSpawnedCall;

  constructor(call: RegisterSpawnedCall) {
    this._call = call;
  }
}

export class CancelEscapeCall extends ethereum.Call {
  get inputs(): CancelEscapeCall__Inputs {
    return new CancelEscapeCall__Inputs(this);
  }

  get outputs(): CancelEscapeCall__Outputs {
    return new CancelEscapeCall__Outputs(this);
  }
}

export class CancelEscapeCall__Inputs {
  _call: CancelEscapeCall;

  constructor(call: CancelEscapeCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelEscapeCall__Outputs {
  _call: CancelEscapeCall;

  constructor(call: CancelEscapeCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class IncrementContinuityNumberCall extends ethereum.Call {
  get inputs(): IncrementContinuityNumberCall__Inputs {
    return new IncrementContinuityNumberCall__Inputs(this);
  }

  get outputs(): IncrementContinuityNumberCall__Outputs {
    return new IncrementContinuityNumberCall__Outputs(this);
  }
}

export class IncrementContinuityNumberCall__Inputs {
  _call: IncrementContinuityNumberCall;

  constructor(call: IncrementContinuityNumberCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncrementContinuityNumberCall__Outputs {
  _call: IncrementContinuityNumberCall;

  constructor(call: IncrementContinuityNumberCall) {
    this._call = call;
  }
}

export class SetKeysCall extends ethereum.Call {
  get inputs(): SetKeysCall__Inputs {
    return new SetKeysCall__Inputs(this);
  }

  get outputs(): SetKeysCall__Outputs {
    return new SetKeysCall__Outputs(this);
  }
}

export class SetKeysCall__Inputs {
  _call: SetKeysCall;

  constructor(call: SetKeysCall) {
    this._call = call;
  }

  get _point(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _encryptionKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _authenticationKey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _cryptoSuiteVersion(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetKeysCall__Outputs {
  _call: SetKeysCall;

  constructor(call: SetKeysCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
